package com.csye6225.spring2018;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import java.util.List;

@Controller
public class WebController {

    @Autowired
    JdbcTemplate jdbcTemplate;

    @RequestMapping(value={"/","home"}, produces = MediaType.APPLICATION_JSON_VALUE)
    public String home(){
        return "home";
    }

    @RequestMapping(value={"/welcome"})
    public String welcome(){
        return "welcome";
    }

    @RequestMapping(value="/admin")
    public String admin(){
        return "admin";
    }

    @RequestMapping(value={"/login"},produces = MediaType.APPLICATION_JSON_VALUE)
    public String login(){
        return "login";
    }


    @RequestMapping(value="/403")
    public String Error403(){
        return "403";
    }


    @GetMapping("/signup")
    public String greeting(Model model) {
        model.addAttribute("account", new Account());
        return "signup";
    }
    @PostMapping("/signup")
    public String greetingSubmit(@ModelAttribute Account account) {
//        System.out.println(account.getUsername() + account.getPassword());


        String sql = "SELECT username FROM users WHERE username = ?";
        List<String> certs = jdbcTemplate.queryForList(sql, new Object[] { account.getUsername() },String.class);


        if(certs.isEmpty()) {
            System.out.println("userdeails are being added");
            String newpassword = account.getPassword();
            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
            String hashedPassword = passwordEncoder.encode(newpassword);

            jdbcTemplate.update("INSERT INTO users " + "(username, password) VALUES (?, ?)", new Object[]{account.getUsername(), hashedPassword});
            jdbcTemplate.update("INSERT INTO user_roles " + "(username, role) VALUES (?, ?)", new Object[]{account.getUsername(), "ROLE_USER"});


            return "webresult";

        }


        else {

            return "signupfail";

        }
    }

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String email
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

//        Account n = new Account();
//        n.setUsername(email);
//        //n.setEmail(email);
//        n.setPswd(password);

//        System.out.println("acoounf info;"+n.getUsername() + " - " + n.getEmail());
//        userRepository.save(n);
        return "Saved";
    }
    @GetMapping(path="/all")
    public @ResponseBody Iterable<Account> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }


}