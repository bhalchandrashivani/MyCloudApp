
{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Parameters": {
    "subnetExportName1": {
      "Type": "String"
    },
    "subnetExportName2": {
      "Type": "String"
    },
    "keyTag": {
      "Type": "String"
    },
    "NameTag": {
      "Type": "String"
    },
    "S3BucketTag": {
      "Type": "String"
    },
        "IamTag": {
      "Type": "String"
    }
  },
  "Resources" : {
    "myDynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "id",
            "AttributeType" : "S"   
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "id",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5"
        },
        "TimeToLiveSpecification":
        {
          "AttributeName" : "ttl" ,
          "Enabled" : "TRUE"
        },
        "TableName" : "csye6225"
      }
      
    },
   "ec2Instance" : {
      "Type" : "AWS::EC2::Instance",
       "Properties" : {
         "ImageId" : "ami-66506c1c",
         "Tags" : [ {"Key" : "Name", "Value" : {"Ref" : "NameTag"}} ],
         "KeyName" : { "Ref" : "keyTag" },
         "InstanceType" : "t2.micro",
         "IamInstanceProfile" : { "Ref" : "IamTag" },
         "DisableApiTermination" : "true",
         "BlockDeviceMappings": [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeType": "gp2",
              "VolumeSize": "16"
            }
          }
        ],
         "SecurityGroupIds" : [{"Fn::ImportValue" : "csye6225-cloud-Networking-web-security-group"}],
         "SubnetId" : {"Fn::ImportValue" : "csye6225-cloud-Networking-web-subnet"},
         "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe \n",
                "sudo apt-get update \n",
                "sudo apt-get install openjdk-8-jdk -y\n",
                "sudo apt-get install ruby -y \n",
                "sudo apt-get install wget -y \n",
                "sudo apt-get install python -y \n",
                "sudo apt-get update \n",
                "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                "sudo chmod +x ./install \n",
                "sudo ./install auto \n",
                "sudo service codedeploy-agent start \n",
                "sudo apt-get install tomcat8 -y \n",
                "sudo chmod 777 /var/lib/tomcat8 \n",
                "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dspring.datasource.username=csye6225master -Dspring.datasource.password=csye6225password  -Dspring.profiles.active=aws\\\"\" >> /etc/default/tomcat8 \n",
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.url=\\\"jdbc:mysql://",
                      {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":3306/csye6225\\\"\"' >> /etc/default/tomcat8 \n"
                    ]
                  ]
                  
                },
                "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DbucketName=",{"Ref" : "s3Bucket"},"\\\"\" >> /etc/default/tomcat8 \n",
                "sudo service tomcat8 restart \n",
                "sudo touch /tmp/awslogs.conf \n",
                "sudo echo '[general]' > /tmp/awslogs.conf \n",
                "sudo echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf \n",
                "sudo echo '[logstream1]' >> /tmp/awslogs.conf \n",
                "sudo echo 'file = /var/log/tomcat8/csye6225-aws.log' >> /tmp/awslogs.conf \n",
                "sudo echo 'log_group_name = csye6225-webapp2018' >> /tmp/awslogs.conf \n",
                "sudo echo 'log_stream_name = csye6225-webapp2018' >> /tmp/awslogs.conf \n",
                "sudo echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf \n",
                "sudo curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O \n",
                {
                    "Fn::Join": [
                        " ",
                        [
                            "sudo python ./awslogs-agent-setup.py -n -r",
                            {
                                "Ref": "AWS::Region"
                            },
                            "-c /tmp/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup' \n"
                        ]
                    ]
                },
                "cd /etc/systemd/system \n",
                "sudo touch awslogs.service \n",
                "sudo chmod 777 awslogs.service \n",
                "sudo echo '[Unit]' >> awslogs.service \n",
                "sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service \n",
                "sudo echo 'After=rc-local.service' >> awslogs.service \n",
                "sudo echo '[Service]' >> awslogs.service \n",
                "sudo echo 'Type=simple' >> awslogs.service \n",
                "sudo echo 'Restart=always' >> awslogs.service \n",
                "sudo echo 'KillMode=process' >> awslogs.service \n",
                "sudo echo 'TimeoutSec=infinity' >> awslogs.service \n",
                "sudo echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service \n",
                "sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service  \n",
                "sudo echo '[Install]' >> awslogs.service \n",
                "sudo echo 'WantedBy=multi-user.target' >> awslogs.service \n",
                "sudo systemctl start awslogs.service \n",
                "sudo systemctl enable awslogs.service \n"
              ]
            ]
          }
        }
      }
    },
    
    "myDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
         "DBSubnetGroupDescription" : "Subnet description of db subnets",
         "SubnetIds" : [ {"Fn::ImportValue" : "csye6225-cloud-Networking-db-subnet1Id"},
          {"Fn::ImportValue" : "csye6225-cloud-Networking-db-subnet2Id"} ],
         "Tags" : [ {"Key" : "Name", "Value" : "dbSubnetGroup"} ]
      }
   },
    "myRDSInstance" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
         "DBName" : "csye6225",
         "AllocatedStorage" : "20",
         "Engine" : "MySQL",
        "EngineVersion" : "5.6.37",
        "DBInstanceClass" : "db.t2.medium",
        "MultiAZ" : false,
        "DBInstanceIdentifier" : "csye6225-spring2018",
        "MasterUsername" : "csye6225master",
        "MasterUserPassword" : "csye6225password",
        "DBSubnetGroupName" : {"Ref" : "myDBSubnetGroup"},
        "PubliclyAccessible" : false,
        "VPCSecurityGroups" : [{"Fn::ImportValue" : "csye6225-cloud-Networking-db-security-group"}]
      }
   },
   "SNS" : {
    "Type": "AWS::SNS::Topic",
    "Properties": {
      "TopicName": "password_reset"
    }
  },
   "s3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : { "Ref" : "S3BucketTag" }
      }
   } 
  },
	"Outputs": {
        "InstanceID" : {
    "Description": "The Instance ID",  
    "Value" : { "Ref" : "ec2Instance" }
 	 },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "ec2Instance",
                    "AvailabilityZone"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "ec2Instance",
                    "PublicDnsName"
                ]
            }
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "ec2Instance",
                    "PublicIp"
                ]
            }
        }
    }
	
}
